ctmc

            const int N = 1000;
            const int cN = 992;

            module cross_inhibition
                
                x : [0..N] init 4;
                y : [0..N] init 4;
                u : [0..N] init 0;
                Cx : [0..N] init 496;
                Cy : [0..N] init 496;
                
                [cix] 	   (x>0) & (y>0) & (u<N) -> x*y : (x'=x) & (y'=y-1) & (u'=u+1); // x+y -> x+u
                [ciy] 	   (x>0) & (y>0) & (u<N) -> x*y : (x'=x-1) & (y'=y) & (u'=u+1); // x+y -> y+u
                [rx] 	   (x>0) & (x<N) & (u>0) -> x*u : (x'=x+1) & (u'=u-1);  	// u+x -> 2x 
                [ry]       (y>0) & (y<N) & (u>0) -> y*u : (y'=y+1) & (u'=u-1);		// u+y -> 2y

                [conxa]    (x>0) & (Cy>0) & (u<N) -> x*Cy : (x'=x-1) & (u'=u+1);		// x+Cy -> u+Cy
                [conxb]    (u>0) & (Cy>0) & (y<N) -> u*Cy : (u'=u-1) & (y'=y+1);		// u+Cy -> y+Cy
                [conxc]    (x>0) & (Cx>0) & (Cy<cN) -> x*Cx : (Cx'=Cx-1) & (Cy'=Cy+1);		// x+Cx -> x+Cy
                [conya]    (y>0) & (Cx>0) & (u<N) -> y*Cx : (y'=y-1) & (u'=u+1);		// y+Cx -> u+Cx
                [conyb]    (u>0) & (Cx>0) & (x<N) -> u*Cx : (u'=u-1) & (x'=x+1);		// u+Cx -> x+Cx
                [conyc]    (y>0) & (Cy>0) & (Cx<cN) -> y*Cy : (Cy'=Cy-1) & (Cx'=Cx+1);		// y+Cy -> y+Cx
                [conxx]    (Cx>2) & (Cy<(cN-1)) -> (Cx*(Cx-1)/2) : (Cx'=Cx-2) & (Cy'=Cy+2);		// Cx+Cx->Cy+Cy
                [conyy]    (Cy>2) & (Cx<(cN-1)) -> (Cy*(Cy-1)/2) : (Cy'=Cy-2) & (Cx'=Cx+2);		// Cy+Cy->Cx+Cx

            endmodule

            // base rates
            const double qx = 0.001; 
            const double qy = 0.001; 

            // module representing the base rates of reactions
            module base_rates
                
                [cix] true -> qx : true;
                [ciy] true -> qy : true;
                [rx] true -> qx : true;
                [ry] true -> qy : true;
                [conxa] true -> qy : true;
                [conxb] true -> qy : true;	
                [conxc] true -> qy : true;
                [conya] true -> qx : true;
                [conyb] true -> qx : true;
                [conyc] true -> qx : true;
                [conxx] true -> qy : true;
                [conyy] true -> qx : true;

            endmodule